
Create a CustomStack class with operations Push, Pop, Peek, and IsEmpty. Demonstrate its LIFO behavior by pushing integers onto
the stack, then popping and displaying them until the stack is empty.

import java.util.ArrayList;
import java.util.EmptyStackException;
import java.util.List;

public class CustomStack {
    private List<Integer> stack;

    public CustomStack() {
        stack = new ArrayList<>();
    }

    public void push(int element) {
        stack.add(element);
    }

    public int pop() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        int lastIndex = stack.size() - 1;
        int poppedElement = stack.get(lastIndex);
        stack.remove(lastIndex);
        return poppedElement;
    }

    public int peek() {
        if (isEmpty()) {
            throw new EmptyStackException();
        }
        return stack.get(stack.size() - 1);
    }

    public boolean isEmpty() {
        return stack.isEmpty();
    }

    public static void main(String[] args) {
        CustomStack stack = new CustomStack();

        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.push(40);

        System.out.println("Popping elements from the stack:");
        while (!stack.isEmpty()) {
            System.out.println("Popped: " + stack.pop());
        }

        try {
            stack.pop();
        } catch (EmptyStackException e) {
            System.out.println("Tried to pop from an empty stack. Caught EmptyStackException.");
        }
    }
}


